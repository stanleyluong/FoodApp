{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","image_url","alt","name","location","address1","address2","address3","city","state","zip_code","categories","title","rating","review_count","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","sortBy","handleTermChange","bind","handleLocationChange","handleSortByChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","getSortByClass","renderSortByOptions","onSubmit","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","alias","coordinates","display_phone","distance","is_closed","phone","price","url","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d46ddfc8.chunk.js","sourcesContent":["import React from 'react'\nimport './Business.css'\nclass Business extends React.Component {\n    render(){\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.image_url} alt=''/>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.location.address1}</p>\n                        <p>{this.props.business.location.address2}</p>\n                        <p>{this.props.business.location.address3}</p>\n                        <p>{this.props.business.location.city} {this.props.business.location.state}</p>\n                        <p>{this.props.business.location.zip_code}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.categories[0].title}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} Stars</h3>\n                        <p>{this.props.business.review_count} Reviews</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Business","import React from 'react'\nimport './BusinessList.css'\nimport Business from '../Business/Business'\n\nclass BusinessList extends React.Component {\n    render(){\n        return(\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business=>{\n                    // console.log(business)\n                    return <Business key={business.id} business={business}/>\n                })}\n            </div> \n        )\n    }\n}\n\nexport default BusinessList","import React from 'react'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            term: '',\n            location:'',\n            sortBy: 'best_match'\n        }\n        this.handleTermChange = this.handleTermChange.bind(this)\n        this.handleLocationChange = this.handleLocationChange.bind(this)\n        this.handleSortByChange = this.handleSortByChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        }\n    }\n    getSortByClass(sortByOption){\n        if(this.state.sortBy===sortByOption){\n            return 'active'\n        } else {\n            return ''\n        }\n    }\n    handleSortByChange(sortByOption){\n        this.setState({\n            sortBy: sortByOption\n        })\n    }\n    handleTermChange(event){\n        this.setState({\n            term: event.target.value\n        })\n    }\n    handleLocationChange(event){\n        this.setState({\n            location: event.target.value\n        })\n    }\n    handleSearch(event){\n        this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy)\n        event.preventDefault()\n    }\n    renderSortByOptions(){\n        return Object.keys(this.sortByOptions).map(sortByOption=>{\n            let sortByOptionValue = this.sortByOptions[sortByOption]\n            return <li onClick={this.handleSortByChange.bind(this,sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue}>{sortByOption}</li>\n        })\n    }\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                    {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <form onSubmit={this.handleSearch}>\n                        <input \n                        onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                        <input \n                        onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                        <button onClick={this.handleSearch} className=\"SearchBar-submit\">\n                            Let's Go\n                        </button>\n                    </form>\n                    {/* <div className=\"Submit\">\n                        \n                    </div> */}\n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default SearchBar","const apiKey = \"2ZiPvuYPqXKiFUvh0BwHoQnpX_hSYt3SMJv-2HJ_zmEnHDXpf5wko4KHdNXg-i0w56Z5JSdOyR25s9eq_4dpA_BhVP97la4MIgU8hYa6bGK2e0xjQA8AuyqAun-GX3Yx\"\n\nconst Yelp = {\n    search(term,location,sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        }).then(response=>{\n            return response.json()\n        }).then(jsonResponse=>{\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map(business=>{\n                        console.log(business)\n                        return {\n                            id: business.id,\n                            alias: business.alias,\n                            image_url: business.image_url,\n                            categories: business.categories,\n                            coordinates: business.coordinates,\n                            display_phone: business.display_phone,\n                            distance: business.distance,\n                            is_closed: business.is_closed,\n                            location: business.location,\n                            name: business.name,\n                            phone: business.phone,\n                            price: business.price,\n\n                            // address: business.address,\n                            // city: business.city,\n                            // state: business.state,\n                            // zipCode: business.zipCode,\n                            // category: business.category,\n                            rating: business.rating,\n                            review_count: business.review_count,\n                            url: business.url\n                        }\n                })\n            }\n        })\n    }\n}\n\nexport default Yelp","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList'\nimport SearchBar from '../SearchBar/SearchBar'\nimport Yelp from '../../util/Yelp'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n  searchYelp(term,location,sortBy){\n    console.log(term,location,sortBy)\n    Yelp.search(term,location,sortBy).then(businesses=>{\n      this.setState({\n        businesses: businesses\n      })\n    })\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>FoodApp</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}