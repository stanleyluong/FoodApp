{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","image_url","alt","name","location","address1","address2","address3","city","state","zip_code","Math","floor","distance","categories","title","rating","review_count","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","sortBy","placeholder","handleTermChange","bind","handleLocationChange","handleSortByChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","console","log","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","getSortByClass","renderSortByOptions","onSubmit","onChange","apiKey","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","alias","coordinates","display_phone","is_closed","phone","price","url","searchGeo","latitude","longitude","App","navigator","self","geolocation","getCurrentPosition","position","a","coords","fetchLocation","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97beaddc.chunk.js","sourcesContent":["import React from 'react'\nimport './Business.css'\nclass Business extends React.Component {\n    render(){\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.image_url} alt=''/>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.location.address1}</p>\n                        <p>{this.props.business.location.address2}</p>\n                        <p>{this.props.business.location.address3}</p>\n                        <p>{this.props.business.location.city} {this.props.business.location.state}</p>\n                        <p>{this.props.business.location.zip_code}</p>\n                        <p>{Math.floor(this.props.business.distance)} meters away</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.categories[0].title}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} Stars</h3>\n                        <p>{this.props.business.review_count} Reviews</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Business","import React from 'react'\nimport './BusinessList.css'\nimport Business from '../Business/Business'\n\nclass BusinessList extends React.Component {\n    render(){\n        return(\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business=>{\n                    return <Business key={business.id} business={business}/>\n                })}\n            </div> \n        )\n    }\n}\n\nexport default BusinessList","import React from 'react'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            term: '',\n            location:'',\n            sortBy: 'best_match',\n            placeholder: 'Near...'\n        }\n        this.handleTermChange = this.handleTermChange.bind(this)\n        this.handleLocationChange = this.handleLocationChange.bind(this)\n        this.handleSortByChange = this.handleSortByChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count',\n            'Distance': 'distance'\n        }\n    }\n    getSortByClass(sortByOption){\n        if(this.state.sortBy===sortByOption){\n            return 'active'\n        } else {\n            return ''\n        }\n    }\n    handleSortByChange(sortByOption){\n        this.setState({\n            sortBy: sortByOption\n        })\n    }\n    handleTermChange(event){\n        this.setState({\n            term: event.target.value\n        })\n    }\n    handleLocationChange(event){\n        this.setState({\n            location: event.target.value\n        })\n    }\n    handleSearch(event){\n        console.log(this.state.term, this.state.location, this.state.sortBy)\n        this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy)\n        event.preventDefault()\n    }\n    renderSortByOptions(){\n        return Object.keys(this.sortByOptions).map(sortByOption=>{\n            let sortByOptionValue = this.sortByOptions[sortByOption]\n            return <li onClick={this.handleSortByChange.bind(this,sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue}>{sortByOption}</li>\n        })\n    }\n    \n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                    {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <form onSubmit={this.handleSearch}>\n                        <input onChange={this.handleTermChange} placeholder=\"Find...\" />\n                        <input onChange={this.handleLocationChange} placeholder={this.props.placeholder} />\n                        <button onClick={this.handleSearch} className=\"SearchBar-submit\">Let's Go</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","const apiKey = \"7R8guCX9uPFAVZ5J4nrHFt8c402C8uWMCIZnyD2MEUKl6tI5nHFGHObPB26_kp3DfmRItpDo2fVyH9uOLX7v9PdKuDsQF9IKufojEO1Wj68hxrcwwIxfXGYrwh2KX3Yx\"\n\nconst Yelp = {\n    search(term,location,sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}&limit=50`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        }).then(response=>{\n            return response.json()\n        }).then(jsonResponse=>{\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map(business=>{\n                        console.log(business)\n                        return {\n                            id: business.id,\n                            alias: business.alias,\n                            image_url: business.image_url,\n                            categories: business.categories,\n                            coordinates: business.coordinates,\n                            display_phone: business.display_phone,\n                            distance: business.distance,\n                            is_closed: business.is_closed,\n                            location: business.location,\n                            name: business.name,\n                            phone: business.phone,\n                            price: business.price,\n                            rating: business.rating,\n                            review_count: business.review_count,\n                            url: business.url\n                        }\n                })\n            }\n        })\n    },\n    searchGeo(term, latitude, longitude, sortBy){\n        return fetch(`http://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&latitude=${latitude}&longitude=${longitude}&sort_by=${sortBy}&limit=50`,{\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        }).then(response=>{\n            return response.json()\n        }).then(jsonResponse=>{\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map(business=>{\n                    return {\n                        id: business.id,\n                            alias: business.alias,\n                            image_url: business.image_url,\n                            categories: business.categories,\n                            coordinates: business.coordinates,\n                            display_phone: business.display_phone,\n                            distance: business.distance,\n                            is_closed: business.is_closed,\n                            location: business.location,\n                            name: business.name,\n                            phone: business.phone,\n                            price: business.price,\n                            rating: business.rating,\n                            review_count: business.review_count,\n                            url: business.url\n                    }\n                })\n            }\n        })\n    }\n}\n\nexport default Yelp","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList'\nimport SearchBar from '../SearchBar/SearchBar'\nimport Yelp from '../../util/Yelp'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      businesses: [],\n      latitude: 0,\n      longitude: 0,\n      placeholder: \"Near...\",\n      location: {}\n    }\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n  componentDidMount() {\n    if (\"geolocation\" in navigator) {\n      console.log(\"Available\");\n      const self = this;\n      navigator.geolocation.getCurrentPosition(function(position) {\n        console.log(\"Latitude is :\", position.coords.latitude);\n        console.log(\"Longitude is :\", position.coords.longitude);\n        self.setState({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n        async function fetchLocation(){\n          const response = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${self.state.latitude}&longitude=${self.state.longitude}&localityLanguage=en`)\n          const location = await response.json()\n          return location\n        }\n        fetchLocation().then(location=>{\n          console.log(location)\n          self.setState({\n            placeholder: \"Current Location\",\n            location: location\n          })\n        })\n      });\n    } else {\n      console.log(\"Not Available\");\n    }\n  }\n  searchYelp(term,location,sortBy){\n    if(location!==\"\"){\n      Yelp.search(term,location,sortBy).then(businesses=>{\n        console.log(this)\n        this.setState({\n          businesses: businesses\n        })\n      })\n    }\n    if(location===\"\" && \"geolocation\" in navigator){\n      console.log(this.state.latitude, 'lat',this.state.longitude,'longitude')\n      Yelp.searchGeo(term, this.state.latitude, this.state.longitude, sortBy).then(businesses=>{\n        this.setState({\n          businesses: businesses\n        })\n      })\n    }\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>FoodApp</h1>\n        <SearchBar searchYelp={this.searchYelp} placeholder={this.state.placeholder}/>\n        <BusinessList businesses={this.state.businesses}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}